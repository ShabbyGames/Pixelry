<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monster_zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>init_monster</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 10+random(20);
dis = 0;
minDis = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isHit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if action != "flinching"
{
    action = "jumping";
    lock = 0;
    vspeed = -4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lock = 0;
if dis &gt; minDis
{
    switch(action)
    {
        case "neutral":
        if targetFound = false
        {
            side = choose("left","right");
            action = "walking";
            alarm[0] = 20+random(10);
        }
        else
        {
            action = "walking";
            side = targetSide;
            alarm[0] = 7;
        }
        break;
        case "walking":
        if targetFound = false
        {
            action = choose("neutral","walking");
            alarm[0] = 20+random(10);
        }
        else
        {
            if side = targetSide
            {
                action = "running";
            }
            else
            {
                action = "neutral";
                alarm[0] = 5;
            }
        }
        break;
        case "running":
        if targetFound = false
        {
            action = "walking";
            alarm[0] = 7;
        }
        else
        {
            if side != targetSide
            {
                action = "walking";
                alarm[0] = 7;
            }
        }
        break;
        case "attack":
        if targetFound = false
        {
            action = "neutral";
            alarm[0] = 4;
        }
        else
        {
            if side != targetSide
            {
                side = targetSide;
            }
            if dis &gt; minDis
            {
                action = "neutral";
                alarm[0] = 4;
            }
        }
        break;
    }
}
else
{
    action = "attack";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for target and basic physics
if vspeed &gt; 8 vspeed = 8;
if !collision_line(x-8,y+1,x+7,y+1,obj_static_parent,true,false)
{
    gravity = 0.5;
    inAir = 1;
}
if instance_number(obj_player) &gt; 0
    dis = point_distance(x,y,obj_player.x,obj_player.y);
check_object_in_range(-90,-32,+99,0,obj_player,false,false,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animations and behaviour controller
if side = "left" image_xscale = -1;
if side = "right" image_xscale = 1;
if action = "neutral" and inAir = 0
{
    if lock = 0
    {
        image_speed = 0;
        image_index = 0;
        lock = 1;
    }
}
if action = "walking" and inAir = 0
{
    if lock = 0
    {
        image_index = 3;
        image_speed = 0.3;
        moveMulti = 1;
        lock = 1;
    }
    if image_index &gt; 7 image_index = 3;
    if side = "left" and !collision_line(x-10,y-1,x-10,y-12,obj_static_parent,true,false)
    {
        x -= moveMulti;
    }
    if side = "right" and !collision_line(x+9,y-1,x+9,y-12,obj_static_parent,true,false)
    {
        x += moveMulti;
    }
}
if action = "running" and inAir = 0
{
    if lock = 0
    {
        image_index = 7;
        image_speed = 0.3;
        moveMulti = 2;
        lock = 1;
    }
    if image_index &gt; 11 image_index = 7;
    if side = "left" and !collision_line(x-10,y-1,x-10,y-12,obj_static_parent,true,false)
    {
        x -= moveMulti;
    }
    if side = "right" and !collision_line(x+9,y-1,x+9,y-12,obj_static_parent,true,false)
    {
        x += moveMulti;
    }
    if targetFound = false
    {
        if lock = 1
        {
            alarm[0] = 7;
            lock = 2;
        }
    }
    if side != targetSide
    {
        if lock = 1
        {
            alarm[0] = 7;
            lock = 2;
        }
    }
    if dis &lt; minDis
    {
        action = "attack";
        lock = 0;
    }
}
if action = "attack" and inAir = 0
{
    if lock = 0
    {
        image_index = 1;
        image_speed = 0.2;
        lock = 1;
    }
    if image_index = 2
    {
        if lock = 1
        {
            if side = "left"
                hitbox_create(x,y,obj_hitbox,0,-1,image_yscale,0.4,2,5,"neutral",spr_overlay_attack_zombie,0);
            if side = "right"
                hitbox_create(x,y,obj_hitbox,0,1,image_yscale,0.4,2,5,"neutral",spr_overlay_attack_zombie,0);
            image_speed = 0;
            alarm[0] = 8;
            lock = 2;
        }
    }
}
if collision_line(x-8,y+1,x+7,y+1,obj_static_parent,true,false) and action = "jumping"
{
    action = "landing";
    moveMulti = 0;
    lock = 0;
}
if action = "flinching"
{
    if lock = 0
    {
        image_index = 3;
        image_speed = 0.3;
        moveMulti = 2;
        lock = 1;
    }
    if side = "right" and inAir = 1 and !collision_line(x-10,y-1,x-10,y-12,obj_static_parent,true,false)
    {
        x -= moveMulti;
    }
    if side = "left" and inAir = 1 and !collision_line(x+9,y-1,x+9,y-12,obj_static_parent,true,false)
    {
        x += moveMulti;
    }
    if image_index &lt; 1 image_index = 4;
}
if collision_line(x-8,y+1,x+7,y+1,obj_static_parent,true,false) and action = "flinching"
{
    action = "landing";
    moveMulti = 0;
    lock = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if defeated
if check_dead()
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hitbox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.allied != 0
{
    if check_attack_sword()
    {
        if isHit = 0
        {
            isHit = 1;
            alarm[2] = 5;
            //vspeed = -3;
            //check_collision_flinch();
            hp -= other.damage;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = 0;
vspeed = 0;
move_contact_solid(270,-1);
inAir = 0;
hspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
